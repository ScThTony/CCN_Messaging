#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CCN_CameraService
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CCN_BMS")]
	public partial class bmsContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStatusEventsLog(StatusEventsLog instance);
    partial void UpdateStatusEventsLog(StatusEventsLog instance);
    partial void DeleteStatusEventsLog(StatusEventsLog instance);
    partial void InsertMonitoringPoint(MonitoringPoint instance);
    partial void UpdateMonitoringPoint(MonitoringPoint instance);
    partial void DeleteMonitoringPoint(MonitoringPoint instance);
    partial void InsertCamera(Camera instance);
    partial void UpdateCamera(Camera instance);
    partial void DeleteCamera(Camera instance);
    #endregion
		
		public bmsContext() : 
				base(global::CCN_CameraService.Properties.Settings.Default.CCN_BMSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public bmsContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bmsContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bmsContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bmsContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<StatusEventsLog> StatusEventsLogs
		{
			get
			{
				return this.GetTable<StatusEventsLog>();
			}
		}
		
		public System.Data.Linq.Table<MonitoringPoint> MonitoringPoints
		{
			get
			{
				return this.GetTable<MonitoringPoint>();
			}
		}
		
		public System.Data.Linq.Table<Camera> Cameras
		{
			get
			{
				return this.GetTable<Camera>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusEventsLogs")]
	public partial class StatusEventsLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PK;
		
		private System.DateTime _DateTime;
		
		private string _Event;
		
		private string _Source;
		
		private System.Nullable<bool> _MessageSent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPKChanging(int value);
    partial void OnPKChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnEventChanging(string value);
    partial void OnEventChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnMessageSentChanging(System.Nullable<bool> value);
    partial void OnMessageSentChanged();
    #endregion
		
		public StatusEventsLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PK
		{
			get
			{
				return this._PK;
			}
			set
			{
				if ((this._PK != value))
				{
					this.OnPKChanging(value);
					this.SendPropertyChanging();
					this._PK = value;
					this.SendPropertyChanged("PK");
					this.OnPKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageSent", DbType="Bit")]
		public System.Nullable<bool> MessageSent
		{
			get
			{
				return this._MessageSent;
			}
			set
			{
				if ((this._MessageSent != value))
				{
					this.OnMessageSentChanging(value);
					this.SendPropertyChanging();
					this._MessageSent = value;
					this.SendPropertyChanged("MessageSent");
					this.OnMessageSentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MonitoringPoints")]
	public partial class MonitoringPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordID;
		
		private string _itemFullyQualifiedReference;
		
		private short _AllowedDowntime;
		
		private bool _Enabled;
		
		private System.Nullable<bool> _IsAlarmState;
		
		private System.Nullable<int> _LastEventID;
		
		private System.Nullable<System.DateTime> _LastEventDate;
		
		private System.Nullable<int> _LastActionID;
		
		private int _Priority;
		
		private string _Location;
		
		private string _Equipment;
		
		private string _ParentLocation;
		
		private System.Nullable<int> _CameraKey;
		
		private EntityRef<Camera> _Camera;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnitemFullyQualifiedReferenceChanging(string value);
    partial void OnitemFullyQualifiedReferenceChanged();
    partial void OnAllowedDowntimeChanging(short value);
    partial void OnAllowedDowntimeChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnIsAlarmStateChanging(System.Nullable<bool> value);
    partial void OnIsAlarmStateChanged();
    partial void OnLastEventIDChanging(System.Nullable<int> value);
    partial void OnLastEventIDChanged();
    partial void OnLastEventDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastEventDateChanged();
    partial void OnLastActionIDChanging(System.Nullable<int> value);
    partial void OnLastActionIDChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnEquipmentChanging(string value);
    partial void OnEquipmentChanged();
    partial void OnParentLocationChanging(string value);
    partial void OnParentLocationChanged();
    partial void OnCameraKeyChanging(System.Nullable<int> value);
    partial void OnCameraKeyChanged();
    #endregion
		
		public MonitoringPoint()
		{
			this._Camera = default(EntityRef<Camera>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemFullyQualifiedReference", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string itemFullyQualifiedReference
		{
			get
			{
				return this._itemFullyQualifiedReference;
			}
			set
			{
				if ((this._itemFullyQualifiedReference != value))
				{
					this.OnitemFullyQualifiedReferenceChanging(value);
					this.SendPropertyChanging();
					this._itemFullyQualifiedReference = value;
					this.SendPropertyChanged("itemFullyQualifiedReference");
					this.OnitemFullyQualifiedReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowedDowntime", DbType="SmallInt NOT NULL")]
		public short AllowedDowntime
		{
			get
			{
				return this._AllowedDowntime;
			}
			set
			{
				if ((this._AllowedDowntime != value))
				{
					this.OnAllowedDowntimeChanging(value);
					this.SendPropertyChanging();
					this._AllowedDowntime = value;
					this.SendPropertyChanged("AllowedDowntime");
					this.OnAllowedDowntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAlarmState", DbType="Bit")]
		public System.Nullable<bool> IsAlarmState
		{
			get
			{
				return this._IsAlarmState;
			}
			set
			{
				if ((this._IsAlarmState != value))
				{
					this.OnIsAlarmStateChanging(value);
					this.SendPropertyChanging();
					this._IsAlarmState = value;
					this.SendPropertyChanged("IsAlarmState");
					this.OnIsAlarmStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastEventID", DbType="Int")]
		public System.Nullable<int> LastEventID
		{
			get
			{
				return this._LastEventID;
			}
			set
			{
				if ((this._LastEventID != value))
				{
					this.OnLastEventIDChanging(value);
					this.SendPropertyChanging();
					this._LastEventID = value;
					this.SendPropertyChanged("LastEventID");
					this.OnLastEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastEventDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastEventDate
		{
			get
			{
				return this._LastEventDate;
			}
			set
			{
				if ((this._LastEventDate != value))
				{
					this.OnLastEventDateChanging(value);
					this.SendPropertyChanging();
					this._LastEventDate = value;
					this.SendPropertyChanged("LastEventDate");
					this.OnLastEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActionID", DbType="Int")]
		public System.Nullable<int> LastActionID
		{
			get
			{
				return this._LastActionID;
			}
			set
			{
				if ((this._LastActionID != value))
				{
					this.OnLastActionIDChanging(value);
					this.SendPropertyChanging();
					this._LastActionID = value;
					this.SendPropertyChanged("LastActionID");
					this.OnLastActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Equipment", DbType="NVarChar(255)")]
		public string Equipment
		{
			get
			{
				return this._Equipment;
			}
			set
			{
				if ((this._Equipment != value))
				{
					this.OnEquipmentChanging(value);
					this.SendPropertyChanging();
					this._Equipment = value;
					this.SendPropertyChanged("Equipment");
					this.OnEquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentLocation", DbType="NVarChar(255)")]
		public string ParentLocation
		{
			get
			{
				return this._ParentLocation;
			}
			set
			{
				if ((this._ParentLocation != value))
				{
					this.OnParentLocationChanging(value);
					this.SendPropertyChanging();
					this._ParentLocation = value;
					this.SendPropertyChanged("ParentLocation");
					this.OnParentLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CameraKey", DbType="Int")]
		public System.Nullable<int> CameraKey
		{
			get
			{
				return this._CameraKey;
			}
			set
			{
				if ((this._CameraKey != value))
				{
					if (this._Camera.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCameraKeyChanging(value);
					this.SendPropertyChanging();
					this._CameraKey = value;
					this.SendPropertyChanged("CameraKey");
					this.OnCameraKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Camera_MonitoringPoint", Storage="_Camera", ThisKey="CameraKey", OtherKey="PK", IsForeignKey=true, DeleteRule="CASCADE")]
		public Camera Camera
		{
			get
			{
				return this._Camera.Entity;
			}
			set
			{
				Camera previousValue = this._Camera.Entity;
				if (((previousValue != value) 
							|| (this._Camera.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Camera.Entity = null;
						previousValue.MonitoringPoints.Remove(this);
					}
					this._Camera.Entity = value;
					if ((value != null))
					{
						value.MonitoringPoints.Add(this);
						this._CameraKey = value.PK;
					}
					else
					{
						this._CameraKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("Camera");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cameras")]
	public partial class Camera : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PK;
		
		private bool _MessagingEnabled;
		
		private int _NormalStateInterval;
		
		private string _CameraName;
		
		private System.Guid _ObjectId;
		
		private EntitySet<MonitoringPoint> _MonitoringPoints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPKChanging(int value);
    partial void OnPKChanged();
    partial void OnMessagingEnabledChanging(bool value);
    partial void OnMessagingEnabledChanged();
    partial void OnNormalStateIntervalChanging(int value);
    partial void OnNormalStateIntervalChanged();
    partial void OnCameraNameChanging(string value);
    partial void OnCameraNameChanged();
    partial void OnObjectIdChanging(System.Guid value);
    partial void OnObjectIdChanged();
    #endregion
		
		public Camera()
		{
			this._MonitoringPoints = new EntitySet<MonitoringPoint>(new Action<MonitoringPoint>(this.attach_MonitoringPoints), new Action<MonitoringPoint>(this.detach_MonitoringPoints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PK", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PK
		{
			get
			{
				return this._PK;
			}
			set
			{
				if ((this._PK != value))
				{
					this.OnPKChanging(value);
					this.SendPropertyChanging();
					this._PK = value;
					this.SendPropertyChanged("PK");
					this.OnPKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessagingEnabled", DbType="Bit NOT NULL")]
		public bool MessagingEnabled
		{
			get
			{
				return this._MessagingEnabled;
			}
			set
			{
				if ((this._MessagingEnabled != value))
				{
					this.OnMessagingEnabledChanging(value);
					this.SendPropertyChanging();
					this._MessagingEnabled = value;
					this.SendPropertyChanged("MessagingEnabled");
					this.OnMessagingEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormalStateInterval", DbType="Int NOT NULL")]
		public int NormalStateInterval
		{
			get
			{
				return this._NormalStateInterval;
			}
			set
			{
				if ((this._NormalStateInterval != value))
				{
					this.OnNormalStateIntervalChanging(value);
					this.SendPropertyChanging();
					this._NormalStateInterval = value;
					this.SendPropertyChanged("NormalStateInterval");
					this.OnNormalStateIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CameraName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CameraName
		{
			get
			{
				return this._CameraName;
			}
			set
			{
				if ((this._CameraName != value))
				{
					this.OnCameraNameChanging(value);
					this.SendPropertyChanging();
					this._CameraName = value;
					this.SendPropertyChanged("CameraName");
					this.OnCameraNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ObjectId
		{
			get
			{
				return this._ObjectId;
			}
			set
			{
				if ((this._ObjectId != value))
				{
					this.OnObjectIdChanging(value);
					this.SendPropertyChanging();
					this._ObjectId = value;
					this.SendPropertyChanged("ObjectId");
					this.OnObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Camera_MonitoringPoint", Storage="_MonitoringPoints", ThisKey="PK", OtherKey="CameraKey")]
		public EntitySet<MonitoringPoint> MonitoringPoints
		{
			get
			{
				return this._MonitoringPoints;
			}
			set
			{
				this._MonitoringPoints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MonitoringPoints(MonitoringPoint entity)
		{
			this.SendPropertyChanging();
			entity.Camera = this;
		}
		
		private void detach_MonitoringPoints(MonitoringPoint entity)
		{
			this.SendPropertyChanging();
			entity.Camera = null;
		}
	}
}
#pragma warning restore 1591
